from numpy import pi, log, conj
import sminputs as sminputs

g1 = sminputs.parameters["g1"]
g2 = sminputs.parameters["g2"]
g3 = sminputs.parameters["g3"]
lam = sminputs.parameters["lam"]
yu = sminputs.parameters["yu"]
yd = sminputs.parameters["yd"]
yl = sminputs.parameters["yl"]
yubar = conj(yu)
ydbar = conj(yd)
ylbar = conj(yl)

KroneckerDelta = lambda x, y: int(x==y)

invepsilonbar=0
onelooporder=1

def reloadsminputs():
	global g1
	g1 = sminputs.parameters["g1"]
	global g2
	g2 = sminputs.parameters["g2"]
	global g3
	g3 = sminputs.parameters["g3"]
	global lam
	lam = sminputs.parameters["lam"]
	global yu
	yu = sminputs.parameters["yu"]
	global yd
	yd = sminputs.parameters["yd"]
	global yl
	yl = sminputs.parameters["yl"]
	global yubar 
	yubar = conj(yu)
	global ydbar 
	ydbar = conj(yd)
	global ylbar 
	ylbar = conj(yl)

def alphaO3W(mueta, ):
	return (g2**3 * onelooporder) / (5760 * mueta**2 * pi**2)

def alphaOHW(lam3, lam4, mueta, ):
	return (g2**2 * (2 * lam3 + lam4) * onelooporder) / (768 * mueta**2 * pi**2)

def alphaOHB(lam3, lam4, mueta, ):
	return (g1**2 * (2 * lam3 + lam4) * onelooporder) / (768 * mueta**2 * pi**2)

def alphaOHWB(lam4, mueta, ):
	return (g1 * g2 * lam4 * onelooporder) / (384 * mueta**2 * pi**2)

def alphaOHBox(lam5, lam3, lam4, mueta, ):
	lam5bar = conj(lam5)
	return ((-g1**4-3 * g2**4-80 * lam3**2-80 * lam3 * lam4 + 40 * lam5 * lam5bar) * onelooporder) / (7680 * mueta**2 * pi**2)

def alphaOHD(lam5, lam4, mueta, ):
	lam5bar = conj(lam5)
	return ((-g1**4-20 * lam4**2 + 20 * lam5 * lam5bar) * onelooporder) / (1920 * mueta**2 * pi**2)

def alphaOH(lam5, lam3, lam4, mueta, ):
	lam5bar = conj(lam5)
	return ((-(g2**4 * lam)-20 * lam3**3-30 * lam3**2 * lam4 + 20 * lam * lam4**2-30 * lam3 * lam4**2-10 * lam4**3 + 20 * lam * lam5 * lam5bar-30 * lam3 * lam5 * lam5bar-30 * lam4 * lam5 * lam5bar) * onelooporder) / (960 * mueta**2 * pi**2)

def alphaOeW(flavour0, flavour1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	result = 0
	for mif3 in range(3):
			result += onelooporder * ((-11 * g2 * MN1**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g2 * invepsilonbar * MN1**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g2 * mueta**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (g2 * invepsilonbar * mueta**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g2 * MN1**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g2 * invepsilonbar * MN1**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (3 * g2 * mueta**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g2 * invepsilonbar * mueta**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (g2 * mueta**2 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2 * invepsilonbar * mueta**2 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2 * MN1**6 * log(MN1**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2)-(g2 * MN1**4 * log(MN1**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(g2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2)-(g2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(g2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(11 * g2 * MN2**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g2 * invepsilonbar * MN2**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g2 * mueta**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (g2 * invepsilonbar * mueta**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g2 * MN2**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g2 * invepsilonbar * MN2**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (3 * g2 * mueta**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g2 * invepsilonbar * mueta**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (g2 * mueta**2 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2 * invepsilonbar * mueta**2 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2 * MN2**6 * log(MN2**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2)-(g2 * MN2**4 * log(MN2**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(g2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2)-(g2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(g2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(11 * g2 * MN3**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g2 * invepsilonbar * MN3**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g2 * mueta**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (g2 * invepsilonbar * mueta**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g2 * MN3**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g2 * invepsilonbar * MN3**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (3 * g2 * mueta**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g2 * invepsilonbar * mueta**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (g2 * mueta**2 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2 * invepsilonbar * mueta**2 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2 * MN3**6 * log(MN3**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2)-(g2 * MN3**4 * log(MN3**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(g2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2)-(g2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(g2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2))
	return result

def alphaOeB(flavour0, flavour1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	result = 0
	for mif3 in range(3):
			result += onelooporder * ((11 * g1 * MN1**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (g1 * invepsilonbar * MN1**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2)-(11 * g1 * mueta**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g1 * invepsilonbar * mueta**6 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2)-(3 * g1 * MN1**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2)-(g1 * invepsilonbar * MN1**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(3 * g1 * mueta**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(g1 * invepsilonbar * mueta**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(g1 * mueta**2 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g1 * invepsilonbar * mueta**2 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g1 * MN1**6 * log(MN1**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2) + (g1 * MN1**4 * log(MN1**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g1 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**4 * pi**2) + (g1 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (g1 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (11 * g1 * MN2**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (g1 * invepsilonbar * MN2**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2)-(11 * g1 * mueta**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g1 * invepsilonbar * mueta**6 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2)-(3 * g1 * MN2**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2)-(g1 * invepsilonbar * MN2**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(3 * g1 * mueta**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(g1 * invepsilonbar * mueta**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(g1 * mueta**2 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g1 * invepsilonbar * mueta**2 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g1 * MN2**6 * log(MN2**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2) + (g1 * MN2**4 * log(MN2**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g1 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**4 * pi**2) + (g1 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (g1 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (11 * g1 * MN3**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (g1 * invepsilonbar * MN3**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2)-(11 * g1 * mueta**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g1 * invepsilonbar * mueta**6 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2)-(3 * g1 * MN3**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2)-(g1 * invepsilonbar * MN3**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(3 * g1 * mueta**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(g1 * invepsilonbar * mueta**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(g1 * mueta**2 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g1 * invepsilonbar * mueta**2 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g1 * MN3**6 * log(MN3**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2) + (g1 * MN3**4 * log(MN3**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g1 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**4 * pi**2) + (g1 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (g1 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2))
	return result

def alphaOHq1(flavour0, flavour1, mueta, ):
	return -1 / 11520 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1)) / (mueta**2 * pi**2)

def alphaOHq3(flavour0, flavour1, mueta, ):
	return -1 / 3840 * (g2**4 * onelooporder * KroneckerDelta(flavour0,flavour1)) / (mueta**2 * pi**2)

def alphaOHu(flavour0, flavour1, mueta, ):
	return -1 / 2880 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1)) / (mueta**2 * pi**2)

def alphaOHd(flavour0, flavour1, mueta, ):
	return (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1)) / (5760 * mueta**2 * pi**2)

def alphaOHl1(flavour0, flavour1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * ((g1**4 * KroneckerDelta(flavour0,flavour1)) / (3840 * mueta**2 * pi**2) + (11 * g1**2 * MN1**6 * yN1[flavour1] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN1**6 * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * yN1[flavour1] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(3 * g1**2 * mueta**4 * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2)-(g1**2 * MN1**6 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2) + (11 * g1**2 * MN2**6 * yN2[flavour1] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN2**6 * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * yN2[flavour1] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(3 * g1**2 * mueta**4 * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2)-(g1**2 * MN2**6 * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2) + (11 * g1**2 * MN3**6 * yN3[flavour1] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN3**6 * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * yN3[flavour1] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(3 * g1**2 * mueta**4 * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2)-(g1**2 * MN3**6 * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2))

def alphaOHl3(flavour0, flavour1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * (-1 / 3840 * (g2**4 * KroneckerDelta(flavour0,flavour1)) / (mueta**2 * pi**2)-(11 * g2**2 * MN1**6 * yN1[flavour1] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN1**6 * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * yN1[flavour1] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2) + (g2**2 * MN1**6 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2)-(11 * g2**2 * MN2**6 * yN2[flavour1] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN2**6 * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * yN2[flavour1] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2) + (g2**2 * MN2**6 * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2)-(11 * g2**2 * MN3**6 * yN3[flavour1] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN3**6 * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * yN3[flavour1] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2) + (g2**2 * MN3**6 * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2))

def alphaOHe(flavour0, flavour1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	result = 0
	for mif3 in range(3):
		for mif4 in range(3):
				result += onelooporder * ((g1**4 * KroneckerDelta(flavour0,flavour1)) / (1920 * mueta**2 * pi**2) + (11 * MN1**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (192 * (MN1**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN1**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (192 * (MN1**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**4 * pi**2)-(3 * MN1**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN1**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (16 * (MN1**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**2 * pi**2)-(MN1**6 * log(MN1**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**4 * pi**2) + (MN1**4 * log(MN1**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (16 * (MN1**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN1[mif3] * yN1bar[mif4]) / (32 * (MN1**2-mueta**2)**2 * pi**2) + (11 * MN2**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (192 * (MN2**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN2**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (192 * (MN2**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**4 * pi**2)-(3 * MN2**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN2**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (16 * (MN2**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**2 * pi**2)-(MN2**6 * log(MN2**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**4 * pi**2) + (MN2**4 * log(MN2**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (16 * (MN2**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN2[mif3] * yN2bar[mif4]) / (32 * (MN2**2-mueta**2)**2 * pi**2) + (11 * MN3**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (192 * (MN3**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN3**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (192 * (MN3**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**4 * pi**2)-(3 * MN3**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN3**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (16 * (MN3**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**2 * pi**2)-(MN3**6 * log(MN3**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**4 * pi**2) + (MN3**4 * log(MN3**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (16 * (MN3**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * ylbar[mif4,flavour0] * yN3[mif3] * yN3bar[mif4]) / (32 * (MN3**2-mueta**2)**2 * pi**2))
	return result

def alphaOuH(flavour0, flavour1, lam5, lam4, mueta, ):
	lam5bar = conj(lam5)
	return (onelooporder * (-(g2**4 * yu[flavour0,flavour1]) + 20 * lam4**2 * yu[flavour0,flavour1] + 20 * lam5 * lam5bar * yu[flavour0,flavour1])) / (3840 * mueta**2 * pi**2)

def alphaOdH(flavour0, flavour1, lam5, lam4, mueta, ):
	lam5bar = conj(lam5)
	return (onelooporder * (-(g2**4 * yd[flavour0,flavour1]) + 20 * lam4**2 * yd[flavour0,flavour1] + 20 * lam5 * lam5bar * yd[flavour0,flavour1])) / (3840 * mueta**2 * pi**2)

def alphaOeH(flavour0, flavour1, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ):
	lam5bar = conj(lam5)
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	result = 0
	for mif3 in range(3):
		for mif4 in range(3):
			for mif5 in range(3):
					result += onelooporder * (-1 / 3840 * (g2**4 * yl[flavour0,flavour1]) / (mueta**2 * pi**2) + (lam4**2 * yl[flavour0,flavour1]) / (192 * mueta**2 * pi**2) + (lam5 * lam5bar * yl[flavour0,flavour1]) / (192 * mueta**2 * pi**2) + (3 * lam3 * MN1**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (invepsilonbar * lam3 * MN1**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (32 * (MN1**2-mueta**2)**3 * pi**2)-(3 * lam3 * mueta**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(invepsilonbar * lam3 * mueta**4 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (32 * (MN1**2-mueta**2)**3 * pi**2)-(lam3 * mueta**2 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (16 * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * lam3 * mueta**2 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (16 * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * lam3 * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (32 * (MN1**2-mueta**2) * pi**2)-(lam3 * MN1**4 * log(MN1**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (32 * (MN1**2-mueta**2)**3 * pi**2) + (lam3 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (32 * (MN1**2-mueta**2)**3 * pi**2) + (lam3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (16 * (MN1**2-mueta**2)**2 * pi**2) + (lam3 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN1[mif3] * yN1bar[flavour0]) / (32 * (MN1**2-mueta**2) * pi**2) + (11 * MN1**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN1**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2)-(3 * MN1**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN1**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (32 * (MN1**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**2 * pi**2)-(MN1**6 * log(MN1**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2) + (MN1**4 * log(MN1**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (32 * (MN1**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN1[mif3] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (11 * MN1**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN1**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2)-(3 * MN1**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN1**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (32 * (MN1**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**2 * pi**2)-(MN1**6 * log(MN1**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2) + (MN1**4 * log(MN1**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (32 * (MN1**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN1[mif4] * yN1bar[mif5]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (3 * lam3 * MN2**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (invepsilonbar * lam3 * MN2**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (32 * (MN2**2-mueta**2)**3 * pi**2)-(3 * lam3 * mueta**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(invepsilonbar * lam3 * mueta**4 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (32 * (MN2**2-mueta**2)**3 * pi**2)-(lam3 * mueta**2 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (16 * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * lam3 * mueta**2 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (16 * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * lam3 * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (32 * (MN2**2-mueta**2) * pi**2)-(lam3 * MN2**4 * log(MN2**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (32 * (MN2**2-mueta**2)**3 * pi**2) + (lam3 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (32 * (MN2**2-mueta**2)**3 * pi**2) + (lam3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (16 * (MN2**2-mueta**2)**2 * pi**2) + (lam3 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN2[mif3] * yN2bar[flavour0]) / (32 * (MN2**2-mueta**2) * pi**2) + (11 * MN2**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN2**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2)-(3 * MN2**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN2**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (32 * (MN2**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**2 * pi**2)-(MN2**6 * log(MN2**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2) + (MN2**4 * log(MN2**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (32 * (MN2**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN2[mif3] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (11 * MN2**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN2**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2)-(3 * MN2**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN2**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (32 * (MN2**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**2 * pi**2)-(MN2**6 * log(MN2**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2) + (MN2**4 * log(MN2**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (32 * (MN2**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN2[mif4] * yN2bar[mif5]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (3 * lam3 * MN3**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (invepsilonbar * lam3 * MN3**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (32 * (MN3**2-mueta**2)**3 * pi**2)-(3 * lam3 * mueta**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(invepsilonbar * lam3 * mueta**4 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (32 * (MN3**2-mueta**2)**3 * pi**2)-(lam3 * mueta**2 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (16 * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * lam3 * mueta**2 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (16 * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * lam3 * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (32 * (MN3**2-mueta**2) * pi**2)-(lam3 * MN3**4 * log(MN3**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (32 * (MN3**2-mueta**2)**3 * pi**2) + (lam3 * mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (32 * (MN3**2-mueta**2)**3 * pi**2) + (lam3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (16 * (MN3**2-mueta**2)**2 * pi**2) + (lam3 * log(mueta**2 / HIGHSCALE**2) * yl[mif3,flavour1] * yN3[mif3] * yN3bar[flavour0]) / (32 * (MN3**2-mueta**2) * pi**2) + (11 * MN3**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN3**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2)-(3 * MN3**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN3**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (32 * (MN3**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**2 * pi**2)-(MN3**6 * log(MN3**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2) + (MN3**4 * log(MN3**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (32 * (MN3**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif4] * yl[mif3,flavour1] * ylbar[mif5,mif4] * yN3[mif3] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**2 * pi**2) + (11 * MN3**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (invepsilonbar * MN3**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2)-(11 * mueta**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(invepsilonbar * mueta**6 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2)-(3 * MN3**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(invepsilonbar * MN3**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(3 * mueta**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(invepsilonbar * mueta**4 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (32 * (MN3**2-mueta**2)**3 * pi**2)-(mueta**2 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**2 * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**2 * pi**2)-(MN3**6 * log(MN3**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2) + (MN3**4 * log(MN3**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (mueta**6 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**4 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (32 * (MN3**2-mueta**2)**3 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yl[flavour0,mif3] * yl[mif4,flavour1] * ylbar[mif5,mif3] * yN3[mif4] * yN3bar[mif5]) / (64 * (MN3**2-mueta**2)**2 * pi**2))
	return result

def alphaOqq1(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return -1 / 69120 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)

def alphaOqq3(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return -1 / 7680 * (g2**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)

def alphaOuu(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return -1 / 4320 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)

def alphaOdd(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return -1 / 17280 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)

def alphaOud1(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (4320 * mueta**2 * pi**2)

def alphaOqu1(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return -1 / 8640 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)

def alphaOqd1(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (17280 * mueta**2 * pi**2)

def alphaOll(flavour0, flavour1, flavour2, flavour3, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * (-1 / 3840 * (g2**4 * KroneckerDelta(flavour0,flavour3) * KroneckerDelta(flavour1,flavour2)) / (mueta**2 * pi**2)-(g1**4 * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (7680 * mueta**2 * pi**2) + (g2**4 * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (7680 * mueta**2 * pi**2)-(11 * g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (4608 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g2**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (4608 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (4608 * (MN1**2-mueta**2)**4 * pi**2)-(11 * g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (4608 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (512 * (MN1**2-mueta**2)**3 * pi**2)-(3 * g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (512 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2)-(g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2) * pi**2)-(g2**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2) * pi**2) + (g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2) * pi**2) + (g2**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (768 * (MN1**2-mueta**2) * pi**2)-(11 * g2**2 * MN1**6 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour1,flavour2) * yN1[flavour3] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2) + (g2**2 * MN1**6 * KroneckerDelta(flavour1,flavour2) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2)-(11 * g2**2 * MN1**6 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (2304 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (2304 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour0,flavour3) * yN1[flavour1] * yN1bar[flavour2]) / (384 * (MN1**2-mueta**2) * pi**2) + (g2**2 * MN1**6 * KroneckerDelta(flavour0,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2]) / (384 * (MN1**2-mueta**2) * pi**2)-(11 * g1**2 * MN1**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (4608 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g2**2 * MN1**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (4608 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (4608 * (MN1**2-mueta**2)**4 * pi**2)-(11 * g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (4608 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (512 * (MN1**2-mueta**2)**3 * pi**2)-(3 * g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (512 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**3 * pi**2)-(g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2) * pi**2)-(g2**2 * invepsilonbar * KroneckerDelta(flavour0,flavour1) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2) * pi**2) + (g1**2 * MN1**6 * KroneckerDelta(flavour0,flavour1) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * MN1**6 * KroneckerDelta(flavour0,flavour1) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (256 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2) * pi**2) + (g2**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour2]) / (768 * (MN1**2-mueta**2) * pi**2)-(7 * MN1**4 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(3 * invepsilonbar * MN1**4 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (MN1**2 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (32 * (MN1**2-mueta**2)**3 * pi**2) + (invepsilonbar * MN1**2 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (32 * (MN1**2-mueta**2)**3 * pi**2) + (3 * mueta**4 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (invepsilonbar * mueta**4 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (MN1**2 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (3 * invepsilonbar * MN1**2 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (mueta**2 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (3 * MN1**4 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(MN1**2 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (32 * (MN1**2-mueta**2)**2 * pi**2)-(MN1**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (32 * (MN1**2-mueta**2)**3 * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(MN1**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN1bar[flavour0] * yN1bar[flavour2]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (MN1**3 * MN2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**3 * MN2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(MN1 * MN2 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN2 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN2**3 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN2**3 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN1 * MN2 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN2 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN2 * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(MN1**3 * MN2 * log(MN1**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN2**3 * log(MN2**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN1 * MN2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN2 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(MN1 * MN2 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN2[flavour1] * yN2[flavour3]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(11 * g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (4608 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g2**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (4608 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (4608 * (MN2**2-mueta**2)**4 * pi**2)-(11 * g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (4608 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (512 * (MN2**2-mueta**2)**3 * pi**2)-(3 * g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (512 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2)-(g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2) * pi**2)-(g2**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2) * pi**2) + (g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2) * pi**2) + (g2**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (768 * (MN2**2-mueta**2) * pi**2)-(11 * g2**2 * MN2**6 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour1,flavour2) * yN2[flavour3] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2) + (g2**2 * MN2**6 * KroneckerDelta(flavour1,flavour2) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2) + (3 * MN1**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (256 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(3 * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (256 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(invepsilonbar * mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(3 * MN2**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (256 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (3 * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (256 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2) + (invepsilonbar * mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(MN1**4 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN2**4 * log(MN2**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN2[flavour3] * yN2bar[flavour0]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(11 * g2**2 * MN2**6 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (2304 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (2304 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour0,flavour3) * yN2[flavour1] * yN2bar[flavour2]) / (384 * (MN2**2-mueta**2) * pi**2) + (g2**2 * MN2**6 * KroneckerDelta(flavour0,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2]) / (384 * (MN2**2-mueta**2) * pi**2) + (3 * MN1**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (256 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(3 * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (256 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(invepsilonbar * mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(3 * MN2**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (256 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (3 * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (256 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2) + (invepsilonbar * mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(MN1**4 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN2**4 * log(MN2**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (128 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN2[flavour1] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(11 * g1**2 * MN2**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (4608 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g2**2 * MN2**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (4608 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (4608 * (MN2**2-mueta**2)**4 * pi**2)-(11 * g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (4608 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (512 * (MN2**2-mueta**2)**3 * pi**2)-(3 * g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (512 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**3 * pi**2)-(g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2) * pi**2)-(g2**2 * invepsilonbar * KroneckerDelta(flavour0,flavour1) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2) * pi**2) + (g1**2 * MN2**6 * KroneckerDelta(flavour0,flavour1) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * MN2**6 * KroneckerDelta(flavour0,flavour1) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (256 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2) * pi**2) + (g2**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour2]) / (768 * (MN2**2-mueta**2) * pi**2) + (MN1**3 * MN2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**3 * MN2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(MN1 * MN2 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN2 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN2**3 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN2**3 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN1 * MN2 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN2 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN2 * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(MN1**3 * MN2 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN2**3 * log(MN2**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN1 * MN2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2)**2 * pi**2)-(MN1 * MN2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN1**2-MN2**2) * (MN2**2-mueta**2) * pi**2)-(7 * MN2**4 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(3 * invepsilonbar * MN2**4 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (MN2**2 * mueta**2 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (32 * (MN2**2-mueta**2)**3 * pi**2) + (invepsilonbar * MN2**2 * mueta**2 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (32 * (MN2**2-mueta**2)**3 * pi**2) + (3 * mueta**4 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (invepsilonbar * mueta**4 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (MN2**2 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (3 * invepsilonbar * MN2**2 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (mueta**2 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**2 * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (3 * MN2**4 * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(MN2**2 * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (32 * (MN2**2-mueta**2)**2 * pi**2)-(MN2**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (32 * (MN2**2-mueta**2)**3 * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(MN2**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN2bar[flavour0] * yN2bar[flavour2]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (MN1**3 * MN3 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**3 * MN3 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(MN1 * MN3 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN3 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN3 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN3**3 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN3**3 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN1 * MN3 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN3 * mueta**2 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN3 * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN1**3 * MN3 * log(MN1**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN3**3 * log(MN3**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN1 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(MN1 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN1bar[flavour0] * yN1bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (MN2**3 * MN3 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2**3 * MN3 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(MN2 * MN3 * mueta**2 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2 * MN3 * mueta**2 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2 * MN3 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(MN2 * MN3**3 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2 * MN3**3 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN2 * MN3 * mueta**2 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2 * MN3 * mueta**2 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2 * MN3 * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN2**3 * MN3 * log(MN2**2 / HIGHSCALE**2) * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN2 * MN3**3 * log(MN3**2 / HIGHSCALE**2) * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN2 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN2 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(MN2 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(MN2 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN2bar[flavour0] * yN2bar[flavour2] * yN3[flavour1] * yN3[flavour3]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(11 * g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (4608 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g2**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (4608 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (4608 * (MN3**2-mueta**2)**4 * pi**2)-(11 * g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (4608 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (512 * (MN3**2-mueta**2)**3 * pi**2)-(3 * g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (512 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2)-(g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2) * pi**2)-(g2**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2) * pi**2) + (g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2) * pi**2) + (g2**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (768 * (MN3**2-mueta**2) * pi**2)-(11 * g2**2 * MN3**6 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour1,flavour2) * yN3[flavour3] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2) + (g2**2 * MN3**6 * KroneckerDelta(flavour1,flavour2) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour1,flavour2) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2) + (3 * MN1**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(3 * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(invepsilonbar * mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(3 * MN3**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN3**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (3 * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**4 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (invepsilonbar * mueta**2 * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN1**4 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN3**4 * log(MN3**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (3 * MN2**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(3 * mueta**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(mueta**2 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(invepsilonbar * mueta**2 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(3 * MN3**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN3**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (3 * mueta**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (256 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**4 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**2 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (invepsilonbar * mueta**2 * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN2**4 * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN3**4 * log(MN3**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour2] * yN3[flavour3] * yN3bar[flavour0]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(11 * g2**2 * MN3**6 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (2304 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (2304 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour0,flavour3) * yN3[flavour1] * yN3bar[flavour2]) / (384 * (MN3**2-mueta**2) * pi**2) + (g2**2 * MN3**6 * KroneckerDelta(flavour0,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour2]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour2]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour0,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour2]) / (384 * (MN3**2-mueta**2) * pi**2) + (3 * MN1**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(3 * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(invepsilonbar * mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(3 * MN3**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN3**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (3 * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**4 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (invepsilonbar * mueta**2 * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN1**4 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN3**4 * log(MN3**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour3] * yN1bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (3 * MN2**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(3 * mueta**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * mueta**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(mueta**2 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(invepsilonbar * mueta**2 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(3 * MN3**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN3**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (3 * mueta**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (256 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**4 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**2 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (invepsilonbar * mueta**2 * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN2**4 * log(MN2**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN3**4 * log(MN3**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (128 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour3] * yN2bar[flavour0] * yN3[flavour1] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(11 * g1**2 * MN3**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (4608 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g2**2 * MN3**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (4608 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (4608 * (MN3**2-mueta**2)**4 * pi**2)-(11 * g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (4608 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (512 * (MN3**2-mueta**2)**3 * pi**2)-(3 * g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (512 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**3 * pi**2)-(g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2) * pi**2)-(g2**2 * invepsilonbar * KroneckerDelta(flavour0,flavour1) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2) * pi**2) + (g1**2 * MN3**6 * KroneckerDelta(flavour0,flavour1) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * MN3**6 * KroneckerDelta(flavour0,flavour1) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * mueta**6 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**4 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (256 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2) * pi**2) + (g2**2 * KroneckerDelta(flavour0,flavour1) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour3] * yN3bar[flavour2]) / (768 * (MN3**2-mueta**2) * pi**2) + (MN1**3 * MN3 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1**3 * MN3 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(MN1 * MN3 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN3 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN3 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN3**3 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN1 * MN3**3 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN1 * MN3 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN3 * mueta**2 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN1 * MN3 * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN1**3 * MN3 * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN3**3 * log(MN3**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN1 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2)**2 * pi**2) + (MN1 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN1**2-mueta**2) * pi**2)-(MN1 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(MN1 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN1**2-MN3**2) * (MN3**2-mueta**2) * pi**2) + (MN2**3 * MN3 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2**3 * MN3 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(MN2 * MN3 * mueta**2 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2 * MN3 * mueta**2 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2 * MN3 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(MN2 * MN3**3 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(invepsilonbar * MN2 * MN3**3 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN2 * MN3 * mueta**2 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2 * MN3 * mueta**2 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * MN2 * MN3 * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(MN2**3 * MN3 * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN2 * MN3**3 * log(MN3**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2) + (MN2 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2)**2 * pi**2) + (MN2 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN2**2-mueta**2) * pi**2)-(MN2 * MN3 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2)**2 * pi**2)-(MN2 * MN3 * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN2**2-MN3**2) * (MN3**2-mueta**2) * pi**2)-(7 * MN3**4 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(3 * invepsilonbar * MN3**4 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (MN3**2 * mueta**2 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (32 * (MN3**2-mueta**2)**3 * pi**2) + (invepsilonbar * MN3**2 * mueta**2 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (32 * (MN3**2-mueta**2)**3 * pi**2) + (3 * mueta**4 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (invepsilonbar * mueta**4 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (MN3**2 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**2 * pi**2) + (3 * invepsilonbar * MN3**2 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**2 * pi**2) + (mueta**2 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**2 * pi**2) + (invepsilonbar * mueta**2 * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**2 * pi**2) + (3 * MN3**4 * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(MN3**2 * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (32 * (MN3**2-mueta**2)**2 * pi**2)-(MN3**2 * mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (32 * (MN3**2-mueta**2)**3 * pi**2)-(mueta**4 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(MN3**2 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**2 * pi**2)-(mueta**2 * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3[flavour3] * yN3bar[flavour0] * yN3bar[flavour2]) / (64 * (MN3**2-mueta**2)**2 * pi**2))

def alphaOee(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return -1 / 1920 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)

def alphaOle(flavour0, flavour1, flavour2, flavour3, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * (-1 / 1920 * (g1**4 * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)-(11 * g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2) * pi**2) + (g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2) * pi**2)-(11 * g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2) * pi**2) + (g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2) * pi**2)-(11 * g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2) * pi**2) + (g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2) * pi**2))

def alphaOlq1(flavour0, flavour1, flavour2, flavour3, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * ((g1**4 * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (11520 * mueta**2 * pi**2) + (11 * g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (6912 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (6912 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2) * pi**2)-(g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (1152 * (MN1**2-mueta**2) * pi**2) + (11 * g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (6912 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (6912 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2) * pi**2)-(g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (1152 * (MN2**2-mueta**2) * pi**2) + (11 * g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (6912 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (6912 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2) * pi**2)-(g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (1152 * (MN3**2-mueta**2) * pi**2))

def alphaOlq3(flavour0, flavour1, flavour2, flavour3, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * (-1 / 3840 * (g2**4 * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)-(11 * g2**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (2304 * (MN1**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (256 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2) + (g2**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (384 * (MN1**2-mueta**2) * pi**2)-(11 * g2**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (2304 * (MN2**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (256 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2) + (g2**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (384 * (MN2**2-mueta**2) * pi**2)-(11 * g2**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (2304 * (MN3**2-mueta**2)**4 * pi**2) + (g2**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2) + (3 * g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (256 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2) + (g2**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2) + (g2**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2)**4 * pi**2)-(g2**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2)-(g2**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**2 * pi**2)-(g2**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (384 * (MN3**2-mueta**2) * pi**2))

def alphaOeu(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (1440 * mueta**2 * pi**2)

def alphaOed(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return -1 / 2880 * (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)

def alphaOqe(flavour0, flavour1, flavour2, flavour3, mueta, ):
	return (g1**4 * onelooporder * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (5760 * mueta**2 * pi**2)

def alphaOlu(flavour0, flavour1, flavour2, flavour3, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * ((g1**4 * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (2880 * mueta**2 * pi**2) + (11 * g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (1728 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (288 * (MN1**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (1728 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (288 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (64 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (96 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (96 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (96 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (288 * (MN1**2-mueta**2) * pi**2)-(g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (288 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (288 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (96 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (96 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (288 * (MN1**2-mueta**2) * pi**2) + (11 * g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (1728 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (288 * (MN2**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (1728 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (288 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (64 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (96 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (96 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (96 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (288 * (MN2**2-mueta**2) * pi**2)-(g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (288 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (288 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (96 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (96 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (288 * (MN2**2-mueta**2) * pi**2) + (11 * g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (1728 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (288 * (MN3**2-mueta**2)**4 * pi**2)-(11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (1728 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (288 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (64 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (96 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (96 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (96 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (288 * (MN3**2-mueta**2) * pi**2)-(g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (288 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (288 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (96 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (96 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (288 * (MN3**2-mueta**2) * pi**2))

def alphaOld(flavour0, flavour1, flavour2, flavour3, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ):
	yN1bar = conj(yN1)
	yN2bar = conj(yN2)
	yN3bar = conj(yN3)
	return onelooporder * (-1 / 5760 * (g1**4 * KroneckerDelta(flavour0,flavour1) * KroneckerDelta(flavour2,flavour3)) / (mueta**2 * pi**2)-(11 * g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (3456 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN1**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (576 * (MN1**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (3456 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (576 * (MN1**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (128 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN1[flavour1] * yN1bar[flavour0]) / (576 * (MN1**2-mueta**2) * pi**2) + (g1**2 * MN1**6 * KroneckerDelta(flavour2,flavour3) * log(MN1**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (576 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (576 * (MN1**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (192 * (MN1**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN1[flavour1] * yN1bar[flavour0]) / (576 * (MN1**2-mueta**2) * pi**2)-(11 * g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (3456 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN2**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (576 * (MN2**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (3456 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (576 * (MN2**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (128 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN2[flavour1] * yN2bar[flavour0]) / (576 * (MN2**2-mueta**2) * pi**2) + (g1**2 * MN2**6 * KroneckerDelta(flavour2,flavour3) * log(MN2**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (576 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (576 * (MN2**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (192 * (MN2**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN2[flavour1] * yN2bar[flavour0]) / (576 * (MN2**2-mueta**2) * pi**2)-(11 * g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (3456 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * invepsilonbar * MN3**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (576 * (MN3**2-mueta**2)**4 * pi**2) + (11 * g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (3456 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * invepsilonbar * mueta**6 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (576 * (MN3**2-mueta**2)**4 * pi**2) + (g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (128 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * invepsilonbar * mueta**4 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**3 * pi**2) + (g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * mueta**2 * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**2 * pi**2) + (g1**2 * invepsilonbar * KroneckerDelta(flavour2,flavour3) * yN3[flavour1] * yN3bar[flavour0]) / (576 * (MN3**2-mueta**2) * pi**2) + (g1**2 * MN3**6 * KroneckerDelta(flavour2,flavour3) * log(MN3**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (576 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**6 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (576 * (MN3**2-mueta**2)**4 * pi**2)-(g1**2 * mueta**4 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**3 * pi**2)-(g1**2 * mueta**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (192 * (MN3**2-mueta**2)**2 * pi**2)-(g1**2 * KroneckerDelta(flavour2,flavour3) * log(mueta**2 / HIGHSCALE**2) * yN3[flavour1] * yN3bar[flavour0]) / (576 * (MN3**2-mueta**2) * pi**2))

def wc(mueta, yN2, lam3, MN3, yN3, yN1, lam4, HIGHSCALE, MN2, lam5, MN1, ):
	return {
	        "W": alphaO3W(mueta, ),
	        "phiW": alphaOHW(lam3, lam4, mueta, ),
	        "phiB": alphaOHB(lam3, lam4, mueta, ),
	        "phiWB": alphaOHWB(lam4, mueta, ),
	        "phiBox": alphaOHBox(lam5, lam3, lam4, mueta, ),
	        "phiD": alphaOHD(lam5, lam4, mueta, ),
	        "phi": alphaOH(lam5, lam3, lam4, mueta, ),
	        "eW_11": alphaOeW(0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_12": alphaOeW(0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_13": alphaOeW(0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_21": alphaOeW(1, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_22": alphaOeW(1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_23": alphaOeW(1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_31": alphaOeW(2, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_32": alphaOeW(2, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eW_33": alphaOeW(2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_11": alphaOeB(0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_12": alphaOeB(0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_13": alphaOeB(0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_21": alphaOeB(1, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_22": alphaOeB(1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_23": alphaOeB(1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_31": alphaOeB(2, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_32": alphaOeB(2, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eB_33": alphaOeB(2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phiq1_11": alphaOHq1(0, 0, mueta, ),
	        "phiq1_12": alphaOHq1(0, 1, mueta, ),
	        "phiq1_13": alphaOHq1(0, 2, mueta, ),
	        "phiq1_22": alphaOHq1(1, 1, mueta, ),
	        "phiq1_23": alphaOHq1(1, 2, mueta, ),
	        "phiq1_33": alphaOHq1(2, 2, mueta, ),
	        "phiq3_11": alphaOHq3(0, 0, mueta, ),
	        "phiq3_12": alphaOHq3(0, 1, mueta, ),
	        "phiq3_13": alphaOHq3(0, 2, mueta, ),
	        "phiq3_22": alphaOHq3(1, 1, mueta, ),
	        "phiq3_23": alphaOHq3(1, 2, mueta, ),
	        "phiq3_33": alphaOHq3(2, 2, mueta, ),
	        "phiu_11": alphaOHu(0, 0, mueta, ),
	        "phiu_12": alphaOHu(0, 1, mueta, ),
	        "phiu_13": alphaOHu(0, 2, mueta, ),
	        "phiu_22": alphaOHu(1, 1, mueta, ),
	        "phiu_23": alphaOHu(1, 2, mueta, ),
	        "phiu_33": alphaOHu(2, 2, mueta, ),
	        "phid_11": alphaOHd(0, 0, mueta, ),
	        "phid_12": alphaOHd(0, 1, mueta, ),
	        "phid_13": alphaOHd(0, 2, mueta, ),
	        "phid_22": alphaOHd(1, 1, mueta, ),
	        "phid_23": alphaOHd(1, 2, mueta, ),
	        "phid_33": alphaOHd(2, 2, mueta, ),
	        "phil1_11": alphaOHl1(0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil1_12": alphaOHl1(0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil1_13": alphaOHl1(0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil1_22": alphaOHl1(1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil1_23": alphaOHl1(1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil1_33": alphaOHl1(2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil3_11": alphaOHl3(0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil3_12": alphaOHl3(0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil3_13": alphaOHl3(0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil3_22": alphaOHl3(1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil3_23": alphaOHl3(1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phil3_33": alphaOHl3(2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phie_11": alphaOHe(0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phie_12": alphaOHe(0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phie_13": alphaOHe(0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phie_22": alphaOHe(1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phie_23": alphaOHe(1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "phie_33": alphaOHe(2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "uphi_11": alphaOuH(0, 0, lam5, lam4, mueta, ),
	        "uphi_12": alphaOuH(0, 1, lam5, lam4, mueta, ),
	        "uphi_13": alphaOuH(0, 2, lam5, lam4, mueta, ),
	        "uphi_21": alphaOuH(1, 0, lam5, lam4, mueta, ),
	        "uphi_22": alphaOuH(1, 1, lam5, lam4, mueta, ),
	        "uphi_23": alphaOuH(1, 2, lam5, lam4, mueta, ),
	        "uphi_31": alphaOuH(2, 0, lam5, lam4, mueta, ),
	        "uphi_32": alphaOuH(2, 1, lam5, lam4, mueta, ),
	        "uphi_33": alphaOuH(2, 2, lam5, lam4, mueta, ),
	        "dphi_11": alphaOdH(0, 0, lam5, lam4, mueta, ),
	        "dphi_12": alphaOdH(0, 1, lam5, lam4, mueta, ),
	        "dphi_13": alphaOdH(0, 2, lam5, lam4, mueta, ),
	        "dphi_21": alphaOdH(1, 0, lam5, lam4, mueta, ),
	        "dphi_22": alphaOdH(1, 1, lam5, lam4, mueta, ),
	        "dphi_23": alphaOdH(1, 2, lam5, lam4, mueta, ),
	        "dphi_31": alphaOdH(2, 0, lam5, lam4, mueta, ),
	        "dphi_32": alphaOdH(2, 1, lam5, lam4, mueta, ),
	        "dphi_33": alphaOdH(2, 2, lam5, lam4, mueta, ),
	        "ephi_11": alphaOeH(0, 0, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_12": alphaOeH(0, 1, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_13": alphaOeH(0, 2, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_21": alphaOeH(1, 0, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_22": alphaOeH(1, 1, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_23": alphaOeH(1, 2, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_31": alphaOeH(2, 0, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_32": alphaOeH(2, 1, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "ephi_33": alphaOeH(2, 2, yN1, lam4, HIGHSCALE, mueta, yN2, lam3, MN3, MN2, yN3, lam5, MN1, ),
	        "qq1_1111": alphaOqq1(0, 0, 0, 0, mueta, ),
	        "qq1_1112": alphaOqq1(0, 0, 0, 1, mueta, ),
	        "qq1_1113": alphaOqq1(0, 0, 0, 2, mueta, ),
	        "qq1_1122": alphaOqq1(0, 0, 1, 1, mueta, ),
	        "qq1_1123": alphaOqq1(0, 0, 1, 2, mueta, ),
	        "qq1_1133": alphaOqq1(0, 0, 2, 2, mueta, ),
	        "qq1_1122": alphaOqq1(0, 0, 1, 1, mueta, ),
	        "qq1_1123": alphaOqq1(0, 0, 1, 2, mueta, ),
	        "qq1_1133": alphaOqq1(0, 0, 2, 2, mueta, ),
	        "qq1_1212": alphaOqq1(0, 1, 0, 1, mueta, ),
	        "qq1_1213": alphaOqq1(0, 1, 0, 2, mueta, ),
	        "qq1_1221": alphaOqq1(0, 1, 1, 0, mueta, ),
	        "qq1_1222": alphaOqq1(0, 1, 1, 1, mueta, ),
	        "qq1_1223": alphaOqq1(0, 1, 1, 2, mueta, ),
	        "qq1_1231": alphaOqq1(0, 1, 2, 0, mueta, ),
	        "qq1_1232": alphaOqq1(0, 1, 2, 1, mueta, ),
	        "qq1_1233": alphaOqq1(0, 1, 2, 2, mueta, ),
	        "qq1_1313": alphaOqq1(0, 2, 0, 2, mueta, ),
	        "qq1_1322": alphaOqq1(0, 2, 1, 1, mueta, ),
	        "qq1_1323": alphaOqq1(0, 2, 1, 2, mueta, ),
	        "qq1_1331": alphaOqq1(0, 2, 2, 0, mueta, ),
	        "qq1_1332": alphaOqq1(0, 2, 2, 1, mueta, ),
	        "qq1_1333": alphaOqq1(0, 2, 2, 2, mueta, ),
	        "qq1_2222": alphaOqq1(1, 1, 1, 1, mueta, ),
	        "qq1_2223": alphaOqq1(1, 1, 1, 2, mueta, ),
	        "qq1_2233": alphaOqq1(1, 1, 2, 2, mueta, ),
	        "qq1_2323": alphaOqq1(1, 2, 1, 2, mueta, ),
	        "qq1_2333": alphaOqq1(1, 2, 2, 2, mueta, ),
	        "qq1_3333": alphaOqq1(2, 2, 2, 2, mueta, ),
	        "qq3_1111": alphaOqq3(0, 0, 0, 0, mueta, ),
	        "qq3_1112": alphaOqq3(0, 0, 0, 1, mueta, ),
	        "qq3_1113": alphaOqq3(0, 0, 0, 2, mueta, ),
	        "qq3_1122": alphaOqq3(0, 0, 1, 1, mueta, ),
	        "qq3_1123": alphaOqq3(0, 0, 1, 2, mueta, ),
	        "qq3_1133": alphaOqq3(0, 0, 2, 2, mueta, ),
	        "qq3_1122": alphaOqq3(0, 0, 1, 1, mueta, ),
	        "qq3_1123": alphaOqq3(0, 0, 1, 2, mueta, ),
	        "qq3_1133": alphaOqq3(0, 0, 2, 2, mueta, ),
	        "qq3_1212": alphaOqq3(0, 1, 0, 1, mueta, ),
	        "qq3_1213": alphaOqq3(0, 1, 0, 2, mueta, ),
	        "qq3_1221": alphaOqq3(0, 1, 1, 0, mueta, ),
	        "qq3_1222": alphaOqq3(0, 1, 1, 1, mueta, ),
	        "qq3_1223": alphaOqq3(0, 1, 1, 2, mueta, ),
	        "qq3_1231": alphaOqq3(0, 1, 2, 0, mueta, ),
	        "qq3_1232": alphaOqq3(0, 1, 2, 1, mueta, ),
	        "qq3_1233": alphaOqq3(0, 1, 2, 2, mueta, ),
	        "qq3_1313": alphaOqq3(0, 2, 0, 2, mueta, ),
	        "qq3_1322": alphaOqq3(0, 2, 1, 1, mueta, ),
	        "qq3_1323": alphaOqq3(0, 2, 1, 2, mueta, ),
	        "qq3_1331": alphaOqq3(0, 2, 2, 0, mueta, ),
	        "qq3_1332": alphaOqq3(0, 2, 2, 1, mueta, ),
	        "qq3_1333": alphaOqq3(0, 2, 2, 2, mueta, ),
	        "qq3_2222": alphaOqq3(1, 1, 1, 1, mueta, ),
	        "qq3_2223": alphaOqq3(1, 1, 1, 2, mueta, ),
	        "qq3_2233": alphaOqq3(1, 1, 2, 2, mueta, ),
	        "qq3_2323": alphaOqq3(1, 2, 1, 2, mueta, ),
	        "qq3_2333": alphaOqq3(1, 2, 2, 2, mueta, ),
	        "qq3_3333": alphaOqq3(2, 2, 2, 2, mueta, ),
	        "uu_1111": alphaOuu(0, 0, 0, 0, mueta, ),
	        "uu_1112": alphaOuu(0, 0, 0, 1, mueta, ),
	        "uu_1113": alphaOuu(0, 0, 0, 2, mueta, ),
	        "uu_1122": alphaOuu(0, 0, 1, 1, mueta, ),
	        "uu_1123": alphaOuu(0, 0, 1, 2, mueta, ),
	        "uu_1133": alphaOuu(0, 0, 2, 2, mueta, ),
	        "uu_1122": alphaOuu(0, 0, 1, 1, mueta, ),
	        "uu_1123": alphaOuu(0, 0, 1, 2, mueta, ),
	        "uu_1133": alphaOuu(0, 0, 2, 2, mueta, ),
	        "uu_1212": alphaOuu(0, 1, 0, 1, mueta, ),
	        "uu_1213": alphaOuu(0, 1, 0, 2, mueta, ),
	        "uu_1221": alphaOuu(0, 1, 1, 0, mueta, ),
	        "uu_1222": alphaOuu(0, 1, 1, 1, mueta, ),
	        "uu_1223": alphaOuu(0, 1, 1, 2, mueta, ),
	        "uu_1231": alphaOuu(0, 1, 2, 0, mueta, ),
	        "uu_1232": alphaOuu(0, 1, 2, 1, mueta, ),
	        "uu_1233": alphaOuu(0, 1, 2, 2, mueta, ),
	        "uu_1313": alphaOuu(0, 2, 0, 2, mueta, ),
	        "uu_1322": alphaOuu(0, 2, 1, 1, mueta, ),
	        "uu_1323": alphaOuu(0, 2, 1, 2, mueta, ),
	        "uu_1331": alphaOuu(0, 2, 2, 0, mueta, ),
	        "uu_1332": alphaOuu(0, 2, 2, 1, mueta, ),
	        "uu_1333": alphaOuu(0, 2, 2, 2, mueta, ),
	        "uu_2222": alphaOuu(1, 1, 1, 1, mueta, ),
	        "uu_2223": alphaOuu(1, 1, 1, 2, mueta, ),
	        "uu_2233": alphaOuu(1, 1, 2, 2, mueta, ),
	        "uu_2323": alphaOuu(1, 2, 1, 2, mueta, ),
	        "uu_2333": alphaOuu(1, 2, 2, 2, mueta, ),
	        "uu_3333": alphaOuu(2, 2, 2, 2, mueta, ),
	        "dd_1111": alphaOdd(0, 0, 0, 0, mueta, ),
	        "dd_1112": alphaOdd(0, 0, 0, 1, mueta, ),
	        "dd_1113": alphaOdd(0, 0, 0, 2, mueta, ),
	        "dd_1122": alphaOdd(0, 0, 1, 1, mueta, ),
	        "dd_1123": alphaOdd(0, 0, 1, 2, mueta, ),
	        "dd_1133": alphaOdd(0, 0, 2, 2, mueta, ),
	        "dd_1122": alphaOdd(0, 0, 1, 1, mueta, ),
	        "dd_1123": alphaOdd(0, 0, 1, 2, mueta, ),
	        "dd_1133": alphaOdd(0, 0, 2, 2, mueta, ),
	        "dd_1212": alphaOdd(0, 1, 0, 1, mueta, ),
	        "dd_1213": alphaOdd(0, 1, 0, 2, mueta, ),
	        "dd_1221": alphaOdd(0, 1, 1, 0, mueta, ),
	        "dd_1222": alphaOdd(0, 1, 1, 1, mueta, ),
	        "dd_1223": alphaOdd(0, 1, 1, 2, mueta, ),
	        "dd_1231": alphaOdd(0, 1, 2, 0, mueta, ),
	        "dd_1232": alphaOdd(0, 1, 2, 1, mueta, ),
	        "dd_1233": alphaOdd(0, 1, 2, 2, mueta, ),
	        "dd_1313": alphaOdd(0, 2, 0, 2, mueta, ),
	        "dd_1322": alphaOdd(0, 2, 1, 1, mueta, ),
	        "dd_1323": alphaOdd(0, 2, 1, 2, mueta, ),
	        "dd_1331": alphaOdd(0, 2, 2, 0, mueta, ),
	        "dd_1332": alphaOdd(0, 2, 2, 1, mueta, ),
	        "dd_1333": alphaOdd(0, 2, 2, 2, mueta, ),
	        "dd_2222": alphaOdd(1, 1, 1, 1, mueta, ),
	        "dd_2223": alphaOdd(1, 1, 1, 2, mueta, ),
	        "dd_2233": alphaOdd(1, 1, 2, 2, mueta, ),
	        "dd_2323": alphaOdd(1, 2, 1, 2, mueta, ),
	        "dd_2333": alphaOdd(1, 2, 2, 2, mueta, ),
	        "dd_3333": alphaOdd(2, 2, 2, 2, mueta, ),
	        "ud1_1111": alphaOud1(0, 0, 0, 0, mueta, ),
	        "ud1_1112": alphaOud1(0, 0, 0, 1, mueta, ),
	        "ud1_1113": alphaOud1(0, 0, 0, 2, mueta, ),
	        "ud1_1122": alphaOud1(0, 0, 1, 1, mueta, ),
	        "ud1_1123": alphaOud1(0, 0, 1, 2, mueta, ),
	        "ud1_1133": alphaOud1(0, 0, 2, 2, mueta, ),
	        "ud1_1211": alphaOud1(0, 1, 0, 0, mueta, ),
	        "ud1_1212": alphaOud1(0, 1, 0, 1, mueta, ),
	        "ud1_1213": alphaOud1(0, 1, 0, 2, mueta, ),
	        "ud1_1222": alphaOud1(0, 1, 1, 1, mueta, ),
	        "ud1_1223": alphaOud1(0, 1, 1, 2, mueta, ),
	        "ud1_1233": alphaOud1(0, 1, 2, 2, mueta, ),
	        "ud1_1311": alphaOud1(0, 2, 0, 0, mueta, ),
	        "ud1_1312": alphaOud1(0, 2, 0, 1, mueta, ),
	        "ud1_1313": alphaOud1(0, 2, 0, 2, mueta, ),
	        "ud1_1322": alphaOud1(0, 2, 1, 1, mueta, ),
	        "ud1_1323": alphaOud1(0, 2, 1, 2, mueta, ),
	        "ud1_1333": alphaOud1(0, 2, 2, 2, mueta, ),
	        "ud1_2211": alphaOud1(1, 1, 0, 0, mueta, ),
	        "ud1_2212": alphaOud1(1, 1, 0, 1, mueta, ),
	        "ud1_2213": alphaOud1(1, 1, 0, 2, mueta, ),
	        "ud1_2222": alphaOud1(1, 1, 1, 1, mueta, ),
	        "ud1_2223": alphaOud1(1, 1, 1, 2, mueta, ),
	        "ud1_2233": alphaOud1(1, 1, 2, 2, mueta, ),
	        "ud1_2311": alphaOud1(1, 2, 0, 0, mueta, ),
	        "ud1_2312": alphaOud1(1, 2, 0, 1, mueta, ),
	        "ud1_2313": alphaOud1(1, 2, 0, 2, mueta, ),
	        "ud1_2322": alphaOud1(1, 2, 1, 1, mueta, ),
	        "ud1_2323": alphaOud1(1, 2, 1, 2, mueta, ),
	        "ud1_2333": alphaOud1(1, 2, 2, 2, mueta, ),
	        "ud1_3311": alphaOud1(2, 2, 0, 0, mueta, ),
	        "ud1_3312": alphaOud1(2, 2, 0, 1, mueta, ),
	        "ud1_3313": alphaOud1(2, 2, 0, 2, mueta, ),
	        "ud1_3322": alphaOud1(2, 2, 1, 1, mueta, ),
	        "ud1_3323": alphaOud1(2, 2, 1, 2, mueta, ),
	        "ud1_3333": alphaOud1(2, 2, 2, 2, mueta, ),
	        "qu1_1111": alphaOqu1(0, 0, 0, 0, mueta, ),
	        "qu1_1112": alphaOqu1(0, 0, 0, 1, mueta, ),
	        "qu1_1113": alphaOqu1(0, 0, 0, 2, mueta, ),
	        "qu1_1122": alphaOqu1(0, 0, 1, 1, mueta, ),
	        "qu1_1123": alphaOqu1(0, 0, 1, 2, mueta, ),
	        "qu1_1133": alphaOqu1(0, 0, 2, 2, mueta, ),
	        "qu1_1211": alphaOqu1(0, 1, 0, 0, mueta, ),
	        "qu1_1212": alphaOqu1(0, 1, 0, 1, mueta, ),
	        "qu1_1213": alphaOqu1(0, 1, 0, 2, mueta, ),
	        "qu1_1222": alphaOqu1(0, 1, 1, 1, mueta, ),
	        "qu1_1223": alphaOqu1(0, 1, 1, 2, mueta, ),
	        "qu1_1233": alphaOqu1(0, 1, 2, 2, mueta, ),
	        "qu1_1311": alphaOqu1(0, 2, 0, 0, mueta, ),
	        "qu1_1312": alphaOqu1(0, 2, 0, 1, mueta, ),
	        "qu1_1313": alphaOqu1(0, 2, 0, 2, mueta, ),
	        "qu1_1322": alphaOqu1(0, 2, 1, 1, mueta, ),
	        "qu1_1323": alphaOqu1(0, 2, 1, 2, mueta, ),
	        "qu1_1333": alphaOqu1(0, 2, 2, 2, mueta, ),
	        "qu1_2211": alphaOqu1(1, 1, 0, 0, mueta, ),
	        "qu1_2212": alphaOqu1(1, 1, 0, 1, mueta, ),
	        "qu1_2213": alphaOqu1(1, 1, 0, 2, mueta, ),
	        "qu1_2222": alphaOqu1(1, 1, 1, 1, mueta, ),
	        "qu1_2223": alphaOqu1(1, 1, 1, 2, mueta, ),
	        "qu1_2233": alphaOqu1(1, 1, 2, 2, mueta, ),
	        "qu1_2311": alphaOqu1(1, 2, 0, 0, mueta, ),
	        "qu1_2312": alphaOqu1(1, 2, 0, 1, mueta, ),
	        "qu1_2313": alphaOqu1(1, 2, 0, 2, mueta, ),
	        "qu1_2322": alphaOqu1(1, 2, 1, 1, mueta, ),
	        "qu1_2323": alphaOqu1(1, 2, 1, 2, mueta, ),
	        "qu1_2333": alphaOqu1(1, 2, 2, 2, mueta, ),
	        "qu1_3311": alphaOqu1(2, 2, 0, 0, mueta, ),
	        "qu1_3312": alphaOqu1(2, 2, 0, 1, mueta, ),
	        "qu1_3313": alphaOqu1(2, 2, 0, 2, mueta, ),
	        "qu1_3322": alphaOqu1(2, 2, 1, 1, mueta, ),
	        "qu1_3323": alphaOqu1(2, 2, 1, 2, mueta, ),
	        "qu1_3333": alphaOqu1(2, 2, 2, 2, mueta, ),
	        "qd1_1111": alphaOqd1(0, 0, 0, 0, mueta, ),
	        "qd1_1112": alphaOqd1(0, 0, 0, 1, mueta, ),
	        "qd1_1113": alphaOqd1(0, 0, 0, 2, mueta, ),
	        "qd1_1122": alphaOqd1(0, 0, 1, 1, mueta, ),
	        "qd1_1123": alphaOqd1(0, 0, 1, 2, mueta, ),
	        "qd1_1133": alphaOqd1(0, 0, 2, 2, mueta, ),
	        "qd1_1211": alphaOqd1(0, 1, 0, 0, mueta, ),
	        "qd1_1212": alphaOqd1(0, 1, 0, 1, mueta, ),
	        "qd1_1213": alphaOqd1(0, 1, 0, 2, mueta, ),
	        "qd1_1222": alphaOqd1(0, 1, 1, 1, mueta, ),
	        "qd1_1223": alphaOqd1(0, 1, 1, 2, mueta, ),
	        "qd1_1233": alphaOqd1(0, 1, 2, 2, mueta, ),
	        "qd1_1311": alphaOqd1(0, 2, 0, 0, mueta, ),
	        "qd1_1312": alphaOqd1(0, 2, 0, 1, mueta, ),
	        "qd1_1313": alphaOqd1(0, 2, 0, 2, mueta, ),
	        "qd1_1322": alphaOqd1(0, 2, 1, 1, mueta, ),
	        "qd1_1323": alphaOqd1(0, 2, 1, 2, mueta, ),
	        "qd1_1333": alphaOqd1(0, 2, 2, 2, mueta, ),
	        "qd1_2211": alphaOqd1(1, 1, 0, 0, mueta, ),
	        "qd1_2212": alphaOqd1(1, 1, 0, 1, mueta, ),
	        "qd1_2213": alphaOqd1(1, 1, 0, 2, mueta, ),
	        "qd1_2222": alphaOqd1(1, 1, 1, 1, mueta, ),
	        "qd1_2223": alphaOqd1(1, 1, 1, 2, mueta, ),
	        "qd1_2233": alphaOqd1(1, 1, 2, 2, mueta, ),
	        "qd1_2311": alphaOqd1(1, 2, 0, 0, mueta, ),
	        "qd1_2312": alphaOqd1(1, 2, 0, 1, mueta, ),
	        "qd1_2313": alphaOqd1(1, 2, 0, 2, mueta, ),
	        "qd1_2322": alphaOqd1(1, 2, 1, 1, mueta, ),
	        "qd1_2323": alphaOqd1(1, 2, 1, 2, mueta, ),
	        "qd1_2333": alphaOqd1(1, 2, 2, 2, mueta, ),
	        "qd1_3311": alphaOqd1(2, 2, 0, 0, mueta, ),
	        "qd1_3312": alphaOqd1(2, 2, 0, 1, mueta, ),
	        "qd1_3313": alphaOqd1(2, 2, 0, 2, mueta, ),
	        "qd1_3322": alphaOqd1(2, 2, 1, 1, mueta, ),
	        "qd1_3323": alphaOqd1(2, 2, 1, 2, mueta, ),
	        "qd1_3333": alphaOqd1(2, 2, 2, 2, mueta, ),
	        "ll_1111": alphaOll(0, 0, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1112": alphaOll(0, 0, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1113": alphaOll(0, 0, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1122": alphaOll(0, 0, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1123": alphaOll(0, 0, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1133": alphaOll(0, 0, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1122": alphaOll(0, 0, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1123": alphaOll(0, 0, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1133": alphaOll(0, 0, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1212": alphaOll(0, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1213": alphaOll(0, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1221": alphaOll(0, 1, 1, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1222": alphaOll(0, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1223": alphaOll(0, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1231": alphaOll(0, 1, 2, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1232": alphaOll(0, 1, 2, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1233": alphaOll(0, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1313": alphaOll(0, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1322": alphaOll(0, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1323": alphaOll(0, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1331": alphaOll(0, 2, 2, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1332": alphaOll(0, 2, 2, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_1333": alphaOll(0, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_2222": alphaOll(1, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_2223": alphaOll(1, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_2233": alphaOll(1, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_2323": alphaOll(1, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_2333": alphaOll(1, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ll_3333": alphaOll(2, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ee_1111": alphaOee(0, 0, 0, 0, mueta, ),
	        "ee_1112": alphaOee(0, 0, 0, 1, mueta, ),
	        "ee_1113": alphaOee(0, 0, 0, 2, mueta, ),
	        "ee_1122": alphaOee(0, 0, 1, 1, mueta, ),
	        "ee_1123": alphaOee(0, 0, 1, 2, mueta, ),
	        "ee_1133": alphaOee(0, 0, 2, 2, mueta, ),
	        "ee_1212": alphaOee(0, 1, 0, 1, mueta, ),
	        "ee_1213": alphaOee(0, 1, 0, 2, mueta, ),
	        "ee_1222": alphaOee(0, 1, 1, 1, mueta, ),
	        "ee_1223": alphaOee(0, 1, 1, 2, mueta, ),
	        "ee_1232": alphaOee(0, 1, 2, 1, mueta, ),
	        "ee_1233": alphaOee(0, 1, 2, 2, mueta, ),
	        "ee_1313": alphaOee(0, 2, 0, 2, mueta, ),
	        "ee_1323": alphaOee(0, 2, 1, 2, mueta, ),
	        "ee_1333": alphaOee(0, 2, 2, 2, mueta, ),
	        "ee_2222": alphaOee(1, 1, 1, 1, mueta, ),
	        "ee_2223": alphaOee(1, 1, 1, 2, mueta, ),
	        "ee_2233": alphaOee(1, 1, 2, 2, mueta, ),
	        "ee_2323": alphaOee(1, 2, 1, 2, mueta, ),
	        "ee_2333": alphaOee(1, 2, 2, 2, mueta, ),
	        "ee_3333": alphaOee(2, 2, 2, 2, mueta, ),
	        "le_1111": alphaOle(0, 0, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1112": alphaOle(0, 0, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1113": alphaOle(0, 0, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1122": alphaOle(0, 0, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1123": alphaOle(0, 0, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1133": alphaOle(0, 0, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1211": alphaOle(0, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1212": alphaOle(0, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1213": alphaOle(0, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1222": alphaOle(0, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1223": alphaOle(0, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1233": alphaOle(0, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1311": alphaOle(0, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1312": alphaOle(0, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1313": alphaOle(0, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1322": alphaOle(0, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1323": alphaOle(0, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_1333": alphaOle(0, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2211": alphaOle(1, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2212": alphaOle(1, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2213": alphaOle(1, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2222": alphaOle(1, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2223": alphaOle(1, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2233": alphaOle(1, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2311": alphaOle(1, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2312": alphaOle(1, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2313": alphaOle(1, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2322": alphaOle(1, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2323": alphaOle(1, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_2333": alphaOle(1, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_3311": alphaOle(2, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_3312": alphaOle(2, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_3313": alphaOle(2, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_3322": alphaOle(2, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_3323": alphaOle(2, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "le_3333": alphaOle(2, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1111": alphaOlq1(0, 0, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1112": alphaOlq1(0, 0, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1113": alphaOlq1(0, 0, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1122": alphaOlq1(0, 0, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1123": alphaOlq1(0, 0, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1133": alphaOlq1(0, 0, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1211": alphaOlq1(0, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1212": alphaOlq1(0, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1213": alphaOlq1(0, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1222": alphaOlq1(0, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1223": alphaOlq1(0, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1233": alphaOlq1(0, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1311": alphaOlq1(0, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1312": alphaOlq1(0, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1313": alphaOlq1(0, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1322": alphaOlq1(0, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1323": alphaOlq1(0, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_1333": alphaOlq1(0, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2211": alphaOlq1(1, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2212": alphaOlq1(1, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2213": alphaOlq1(1, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2222": alphaOlq1(1, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2223": alphaOlq1(1, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2233": alphaOlq1(1, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2311": alphaOlq1(1, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2312": alphaOlq1(1, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2313": alphaOlq1(1, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2322": alphaOlq1(1, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2323": alphaOlq1(1, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_2333": alphaOlq1(1, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_3311": alphaOlq1(2, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_3312": alphaOlq1(2, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_3313": alphaOlq1(2, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_3322": alphaOlq1(2, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_3323": alphaOlq1(2, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq1_3333": alphaOlq1(2, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1111": alphaOlq3(0, 0, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1112": alphaOlq3(0, 0, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1113": alphaOlq3(0, 0, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1122": alphaOlq3(0, 0, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1123": alphaOlq3(0, 0, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1133": alphaOlq3(0, 0, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1211": alphaOlq3(0, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1212": alphaOlq3(0, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1213": alphaOlq3(0, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1222": alphaOlq3(0, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1223": alphaOlq3(0, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1233": alphaOlq3(0, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1311": alphaOlq3(0, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1312": alphaOlq3(0, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1313": alphaOlq3(0, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1322": alphaOlq3(0, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1323": alphaOlq3(0, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_1333": alphaOlq3(0, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2211": alphaOlq3(1, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2212": alphaOlq3(1, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2213": alphaOlq3(1, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2222": alphaOlq3(1, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2223": alphaOlq3(1, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2233": alphaOlq3(1, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2311": alphaOlq3(1, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2312": alphaOlq3(1, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2313": alphaOlq3(1, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2322": alphaOlq3(1, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2323": alphaOlq3(1, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_2333": alphaOlq3(1, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_3311": alphaOlq3(2, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_3312": alphaOlq3(2, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_3313": alphaOlq3(2, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_3322": alphaOlq3(2, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_3323": alphaOlq3(2, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lq3_3333": alphaOlq3(2, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "eu_1111": alphaOeu(0, 0, 0, 0, mueta, ),
	        "eu_1112": alphaOeu(0, 0, 0, 1, mueta, ),
	        "eu_1113": alphaOeu(0, 0, 0, 2, mueta, ),
	        "eu_1122": alphaOeu(0, 0, 1, 1, mueta, ),
	        "eu_1123": alphaOeu(0, 0, 1, 2, mueta, ),
	        "eu_1133": alphaOeu(0, 0, 2, 2, mueta, ),
	        "eu_1211": alphaOeu(0, 1, 0, 0, mueta, ),
	        "eu_1212": alphaOeu(0, 1, 0, 1, mueta, ),
	        "eu_1213": alphaOeu(0, 1, 0, 2, mueta, ),
	        "eu_1222": alphaOeu(0, 1, 1, 1, mueta, ),
	        "eu_1223": alphaOeu(0, 1, 1, 2, mueta, ),
	        "eu_1233": alphaOeu(0, 1, 2, 2, mueta, ),
	        "eu_1311": alphaOeu(0, 2, 0, 0, mueta, ),
	        "eu_1312": alphaOeu(0, 2, 0, 1, mueta, ),
	        "eu_1313": alphaOeu(0, 2, 0, 2, mueta, ),
	        "eu_1322": alphaOeu(0, 2, 1, 1, mueta, ),
	        "eu_1323": alphaOeu(0, 2, 1, 2, mueta, ),
	        "eu_1333": alphaOeu(0, 2, 2, 2, mueta, ),
	        "eu_2211": alphaOeu(1, 1, 0, 0, mueta, ),
	        "eu_2212": alphaOeu(1, 1, 0, 1, mueta, ),
	        "eu_2213": alphaOeu(1, 1, 0, 2, mueta, ),
	        "eu_2222": alphaOeu(1, 1, 1, 1, mueta, ),
	        "eu_2223": alphaOeu(1, 1, 1, 2, mueta, ),
	        "eu_2233": alphaOeu(1, 1, 2, 2, mueta, ),
	        "eu_2311": alphaOeu(1, 2, 0, 0, mueta, ),
	        "eu_2312": alphaOeu(1, 2, 0, 1, mueta, ),
	        "eu_2313": alphaOeu(1, 2, 0, 2, mueta, ),
	        "eu_2322": alphaOeu(1, 2, 1, 1, mueta, ),
	        "eu_2323": alphaOeu(1, 2, 1, 2, mueta, ),
	        "eu_2333": alphaOeu(1, 2, 2, 2, mueta, ),
	        "eu_3311": alphaOeu(2, 2, 0, 0, mueta, ),
	        "eu_3312": alphaOeu(2, 2, 0, 1, mueta, ),
	        "eu_3313": alphaOeu(2, 2, 0, 2, mueta, ),
	        "eu_3322": alphaOeu(2, 2, 1, 1, mueta, ),
	        "eu_3323": alphaOeu(2, 2, 1, 2, mueta, ),
	        "eu_3333": alphaOeu(2, 2, 2, 2, mueta, ),
	        "ed_1111": alphaOed(0, 0, 0, 0, mueta, ),
	        "ed_1112": alphaOed(0, 0, 0, 1, mueta, ),
	        "ed_1113": alphaOed(0, 0, 0, 2, mueta, ),
	        "ed_1122": alphaOed(0, 0, 1, 1, mueta, ),
	        "ed_1123": alphaOed(0, 0, 1, 2, mueta, ),
	        "ed_1133": alphaOed(0, 0, 2, 2, mueta, ),
	        "ed_1211": alphaOed(0, 1, 0, 0, mueta, ),
	        "ed_1212": alphaOed(0, 1, 0, 1, mueta, ),
	        "ed_1213": alphaOed(0, 1, 0, 2, mueta, ),
	        "ed_1222": alphaOed(0, 1, 1, 1, mueta, ),
	        "ed_1223": alphaOed(0, 1, 1, 2, mueta, ),
	        "ed_1233": alphaOed(0, 1, 2, 2, mueta, ),
	        "ed_1311": alphaOed(0, 2, 0, 0, mueta, ),
	        "ed_1312": alphaOed(0, 2, 0, 1, mueta, ),
	        "ed_1313": alphaOed(0, 2, 0, 2, mueta, ),
	        "ed_1322": alphaOed(0, 2, 1, 1, mueta, ),
	        "ed_1323": alphaOed(0, 2, 1, 2, mueta, ),
	        "ed_1333": alphaOed(0, 2, 2, 2, mueta, ),
	        "ed_2211": alphaOed(1, 1, 0, 0, mueta, ),
	        "ed_2212": alphaOed(1, 1, 0, 1, mueta, ),
	        "ed_2213": alphaOed(1, 1, 0, 2, mueta, ),
	        "ed_2222": alphaOed(1, 1, 1, 1, mueta, ),
	        "ed_2223": alphaOed(1, 1, 1, 2, mueta, ),
	        "ed_2233": alphaOed(1, 1, 2, 2, mueta, ),
	        "ed_2311": alphaOed(1, 2, 0, 0, mueta, ),
	        "ed_2312": alphaOed(1, 2, 0, 1, mueta, ),
	        "ed_2313": alphaOed(1, 2, 0, 2, mueta, ),
	        "ed_2322": alphaOed(1, 2, 1, 1, mueta, ),
	        "ed_2323": alphaOed(1, 2, 1, 2, mueta, ),
	        "ed_2333": alphaOed(1, 2, 2, 2, mueta, ),
	        "ed_3311": alphaOed(2, 2, 0, 0, mueta, ),
	        "ed_3312": alphaOed(2, 2, 0, 1, mueta, ),
	        "ed_3313": alphaOed(2, 2, 0, 2, mueta, ),
	        "ed_3322": alphaOed(2, 2, 1, 1, mueta, ),
	        "ed_3323": alphaOed(2, 2, 1, 2, mueta, ),
	        "ed_3333": alphaOed(2, 2, 2, 2, mueta, ),
	        "qe_1111": alphaOqe(0, 0, 0, 0, mueta, ),
	        "qe_1112": alphaOqe(0, 0, 0, 1, mueta, ),
	        "qe_1113": alphaOqe(0, 0, 0, 2, mueta, ),
	        "qe_1122": alphaOqe(0, 0, 1, 1, mueta, ),
	        "qe_1123": alphaOqe(0, 0, 1, 2, mueta, ),
	        "qe_1133": alphaOqe(0, 0, 2, 2, mueta, ),
	        "qe_1211": alphaOqe(0, 1, 0, 0, mueta, ),
	        "qe_1212": alphaOqe(0, 1, 0, 1, mueta, ),
	        "qe_1213": alphaOqe(0, 1, 0, 2, mueta, ),
	        "qe_1222": alphaOqe(0, 1, 1, 1, mueta, ),
	        "qe_1223": alphaOqe(0, 1, 1, 2, mueta, ),
	        "qe_1233": alphaOqe(0, 1, 2, 2, mueta, ),
	        "qe_1311": alphaOqe(0, 2, 0, 0, mueta, ),
	        "qe_1312": alphaOqe(0, 2, 0, 1, mueta, ),
	        "qe_1313": alphaOqe(0, 2, 0, 2, mueta, ),
	        "qe_1322": alphaOqe(0, 2, 1, 1, mueta, ),
	        "qe_1323": alphaOqe(0, 2, 1, 2, mueta, ),
	        "qe_1333": alphaOqe(0, 2, 2, 2, mueta, ),
	        "qe_2211": alphaOqe(1, 1, 0, 0, mueta, ),
	        "qe_2212": alphaOqe(1, 1, 0, 1, mueta, ),
	        "qe_2213": alphaOqe(1, 1, 0, 2, mueta, ),
	        "qe_2222": alphaOqe(1, 1, 1, 1, mueta, ),
	        "qe_2223": alphaOqe(1, 1, 1, 2, mueta, ),
	        "qe_2233": alphaOqe(1, 1, 2, 2, mueta, ),
	        "qe_2311": alphaOqe(1, 2, 0, 0, mueta, ),
	        "qe_2312": alphaOqe(1, 2, 0, 1, mueta, ),
	        "qe_2313": alphaOqe(1, 2, 0, 2, mueta, ),
	        "qe_2322": alphaOqe(1, 2, 1, 1, mueta, ),
	        "qe_2323": alphaOqe(1, 2, 1, 2, mueta, ),
	        "qe_2333": alphaOqe(1, 2, 2, 2, mueta, ),
	        "qe_3311": alphaOqe(2, 2, 0, 0, mueta, ),
	        "qe_3312": alphaOqe(2, 2, 0, 1, mueta, ),
	        "qe_3313": alphaOqe(2, 2, 0, 2, mueta, ),
	        "qe_3322": alphaOqe(2, 2, 1, 1, mueta, ),
	        "qe_3323": alphaOqe(2, 2, 1, 2, mueta, ),
	        "qe_3333": alphaOqe(2, 2, 2, 2, mueta, ),
	        "lu_1111": alphaOlu(0, 0, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1112": alphaOlu(0, 0, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1113": alphaOlu(0, 0, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1122": alphaOlu(0, 0, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1123": alphaOlu(0, 0, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1133": alphaOlu(0, 0, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1211": alphaOlu(0, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1212": alphaOlu(0, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1213": alphaOlu(0, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1222": alphaOlu(0, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1223": alphaOlu(0, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1233": alphaOlu(0, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1311": alphaOlu(0, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1312": alphaOlu(0, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1313": alphaOlu(0, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1322": alphaOlu(0, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1323": alphaOlu(0, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_1333": alphaOlu(0, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2211": alphaOlu(1, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2212": alphaOlu(1, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2213": alphaOlu(1, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2222": alphaOlu(1, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2223": alphaOlu(1, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2233": alphaOlu(1, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2311": alphaOlu(1, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2312": alphaOlu(1, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2313": alphaOlu(1, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2322": alphaOlu(1, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2323": alphaOlu(1, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_2333": alphaOlu(1, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_3311": alphaOlu(2, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_3312": alphaOlu(2, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_3313": alphaOlu(2, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_3322": alphaOlu(2, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_3323": alphaOlu(2, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "lu_3333": alphaOlu(2, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1111": alphaOld(0, 0, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1112": alphaOld(0, 0, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1113": alphaOld(0, 0, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1122": alphaOld(0, 0, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1123": alphaOld(0, 0, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1133": alphaOld(0, 0, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1211": alphaOld(0, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1212": alphaOld(0, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1213": alphaOld(0, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1222": alphaOld(0, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1223": alphaOld(0, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1233": alphaOld(0, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1311": alphaOld(0, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1312": alphaOld(0, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1313": alphaOld(0, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1322": alphaOld(0, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1323": alphaOld(0, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_1333": alphaOld(0, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2211": alphaOld(1, 1, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2212": alphaOld(1, 1, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2213": alphaOld(1, 1, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2222": alphaOld(1, 1, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2223": alphaOld(1, 1, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2233": alphaOld(1, 1, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2311": alphaOld(1, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2312": alphaOld(1, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2313": alphaOld(1, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2322": alphaOld(1, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2323": alphaOld(1, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_2333": alphaOld(1, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_3311": alphaOld(2, 2, 0, 0, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_3312": alphaOld(2, 2, 0, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_3313": alphaOld(2, 2, 0, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_3322": alphaOld(2, 2, 1, 1, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_3323": alphaOld(2, 2, 1, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	        "ld_3333": alphaOld(2, 2, 2, 2, yN1, mueta, HIGHSCALE, yN2, MN3, MN2, yN3, MN1, ),
	}